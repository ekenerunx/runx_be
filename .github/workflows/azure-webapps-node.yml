# This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file
# with an API token for Terraform Cloud (app.terraform.io). On pull request events, this workflow will run
# `terraform init`, `terraform fmt`, and `terraform plan` (speculative plan via Terraform Cloud). On push events
# to the "main" branch, `terraform apply` will be executed.
#
# Documentation for `hashicorp/setup-terraform` is located here: https://github.com/hashicorp/setup-terraform
#
# To use this workflow, you will need to complete the following setup steps.
#
# 1. Create a `main.tf` file in the root of this repository with the `remote` backend and one or more resources defined.
#   Example `main.tf`:
#     # The configuration for the `remote` backend.
#     terraform {
#       backend "remote" {
#         # The name of your Terraform Cloud organization.
#         organization = "example-organization"
#
#         # The name of the Terraform Cloud workspace to store Terraform state files in.
#         workspaces {
#           name = "example-workspace"
#         }
#       }
#     }
#
#     # An example resource that does nothing.
#     resource "null_resource" "example" {
#       triggers = {
#         value = "A example resource that does nothing!"
#       }
#     }
#
#
# 2. Generate a Terraform Cloud user API token and store it as a GitHub secret (e.g. TF_API_TOKEN) on this repository.
#   Documentation:
#     - https://www.terraform.io/docs/cloud/users-teams-organizations/api-tokens.html
#     - https://help.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets
#
# 3. Reference the GitHub secret in step using the `hashicorp/setup-terraform` GitHub Action.
#   Example:
#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v1
#       with:
#         cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

name: "backend testing env"

on:
  push:
  pull_request:
    branches: ["fix*"]
env:
  ARM_CLIENT_ID: fbd33fd9-207f-41df-865b-c1def1963244
  ARM_CLIENT_SECRET: csf8Q~gbtxHYsK5GKHHwq3ILVLrz9YviSkzkraTM
  ARM_TENANT_ID: d4089321-fbce-468b-b16b-b3cc8e265717
  ARM_SUBSCRIPTION_ID: 5524a9f3-2588-4778-b99c-618dd11ae068
  IMAGE_NAME: emmanuelekama/runx
  # IMAGE_NAME: my-docker-image
  DOCKER_REGISTRY: docker.io
  DOCKER_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}

permissions:
  contents: read

jobs:
  build_backend:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: install dependency
        run: |
          ls
      #     cd backend
      #     npm install
      # # - name: Checkout code
      # - name: build backend
      #   run: |
      #     cd backend
      #     npm run build

      # - name: backend test coverage
      #   run: |
      #     cd backend
      #     npm run test:cov  || true
      - name: build backend
        run: |
          cd backend
          echo "running test..."

  commit_to_staging:
    runs-on: ubuntu-latest
    needs: build_backend
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{secrets.PAT}}
          commit-message: update authors
          title: Update AUTHORS
          body: Credit new contributors by updating AUTHORS
          branch: staging
          base: fix-build

  #   # On push to "main", build or change infrastructure according to Terraform configuration files
  #   # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
  # # - name: Terraform Apply
  # #   if: github.ref == 'refs/heads/"main"' && github.event_name == 'push'
  # #   run: terraform apply -auto-approve -input=false
