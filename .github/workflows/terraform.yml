# This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file
# with an API token for Terraform Cloud (app.terraform.io). On pull request events, this workflow will run
# `terraform init`, `terraform fmt`, and `terraform plan` (speculative plan via Terraform Cloud). On push events
# to the "main" branch, `terraform apply` will be executed.
#
# Documentation for `hashicorp/setup-terraform` is located here: https://github.com/hashicorp/setup-terraform
#
# To use this workflow, you will need to complete the following setup steps.
#
# 1. Create a `main.tf` file in the root of this repository with the `remote` backend and one or more resources defined.
#   Example `main.tf`:
#     # The configuration for the `remote` backend.
#     terraform {
#       backend "remote" {
#         # The name of your Terraform Cloud organization.
#         organization = "example-organization"
#
#         # The name of the Terraform Cloud workspace to store Terraform state files in.
#         workspaces {
#           name = "example-workspace"
#         }
#       }
#     }
#
#     # An example resource that does nothing.
#     resource "null_resource" "example" {
#       triggers = {
#         value = "A example resource that does nothing!"
#       }
#     }
#
#
# 2. Generate a Terraform Cloud user API token and store it as a GitHub secret (e.g. TF_API_TOKEN) on this repository.
#   Documentation:
#     - https://www.terraform.io/docs/cloud/users-teams-organizations/api-tokens.html
#     - https://help.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets
#
# 3. Reference the GitHub secret in step using the `hashicorp/setup-terraform` GitHub Action.
#   Example:
#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v1
#       with:
#         cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

name: "Terraform"

on:
  push:
    branches: ["fix-build"]
  # pull_request:
env:
  ARM_CLIENT_ID: fbd33fd9-207f-41df-865b-c1def1963244
  ARM_CLIENT_SECRET: csf8Q~gbtxHYsK5GKHHwq3ILVLrz9YviSkzkraTM
  ARM_TENANT_ID: d4089321-fbce-468b-b16b-b3cc8e265717
  ARM_SUBSCRIPTION_ID: 5524a9f3-2588-4778-b99c-618dd11ae068
  IMAGE_NAME: emmanuelekama/runx
  # IMAGE_NAME: my-docker-image
  DOCKER_REGISTRY: docker.io
  DOCKER_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}

permissions:
  contents: read

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: list directory
        run: ls
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: print file
        run: ls
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./backend/dockerfile.dev
          push: true
          tags: ${{ env.IMAGE_NAME }}:${{ github.sha }}
  # terraform:
  #   name: "Terraform"
  #   runs-on: ubuntu-latest
  #   environment: production
  #   # needs: build-and-deploy

  #   # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
  #   defaults:
  #     run:
  #       shell: bash

  #   steps:
  #     # Checkout the repository to the GitHub Actions runner
  #     - name: Checkout
  #       uses: actions/checkout@v3

  #     # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
  #     - name: Setup Terraform
  #       uses: hashicorp/setup-terraform@v1
  #       # with:
  #       #   cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

  #     # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
  #     - name: Terraform Init ./terraform
  #       run: |
  #         cd ./terraform
  #         ls
  #         terraform init

  #     # Checks that all Terraform configuration files adhere to a canonical format
  #     - name: Terraform Format
  #       run: terraform fmt -check

  #     # Generates an execution plan for Terraform
  #     - name: Terraform Plan
  #       id: plan
  #       run: |
  #         cd terraform
  #         terraform plan -var "image_tag=${{ github.sha }}"
  #     # Generates an execution plan for Terraform
  #     - name: Terraform apply
  #       # id: plan
  #       run: |
  #         cd terraform
  #         terraform apply -auto-approve -var "image_tag=${{ github.sha }}"

  #   # On push to "main", build or change infrastructure according to Terraform configuration files
  #   # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
  # # - name: Terraform Apply
  # #   if: github.ref == 'refs/heads/"main"' && github.event_name == 'push'
  # #   run: terraform apply -auto-approve -input=false
